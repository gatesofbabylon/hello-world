# THREE GOLD STARS

# Sudoku [http://en.wikipedia.org/wiki/Sudoku]
# is a logic puzzle where a game
# is defined by a partially filled
# 9 x 9 square of digits where each square
# contains one of the digits 1,2,3,4,5,6,7,8,9.
# For this question we will generalize
# and simplify the game.

# Define a procedure, check_sudoku,
# that takes as input a square list
# of lists representing an n x n
# sudoku puzzle solution and returns the boolean
# True if the input is a valid
# sudoku square and returns the boolean False
# otherwise.

# A valid sudoku square satisfies these
# two properties:

#   1. Each column of the square contains
#       each of the whole numbers from 1 to n exactly once.

#   2. Each row of the square contains each
#       of the whole numbers from 1 to n exactly once.

# You may assume the the input is square and contains at
# least one row and column.

correct = [[1,2,3],
           [2,3,1],
           [3,1,2]]

incorrect = [[1,2,3,4],
             [2,3,1,3],
             [3,1,2,3],
             [4,4,4,4]]

incorrect2 = [[1,2,3,4],
             [2,3,1,4],
             [4,1,2,3],
             [3,4,1,2]]

incorrect3 = [[1,2,3,4,5],
              [2,3,1,5,6],
              [4,5,2,1,3],
              [3,4,5,2,1],
              [5,6,4,3,2]]

incorrect4 = [['a','b','c'],
              ['b','c','a'],
              ['c','a','b']]

incorrect5 = [ [1, 1.5],
               [1.5, 1]]
               
#def check_sudoku(grid):
#code here

##############
##############

#find all positive sequential integer values up to n in list, return whether = valid Sudoku row
def check_list(list):
    grid_width = len(list)
    n = 1
    while n <= grid_width and list.count(n) == 1:
        if list.count(n) != 1:
            return False
        else:
            n = n + 1
    if n == grid_width + 1:
        return True
    else:
        return False

#print(check_list([1,3,3])) #False
#print(check_list([1,2,3])) #True
#print(check_list([1,3,4,5])) #False
#print(check_list([1,2,3,4,5])) #True
#print(check_list([1,2,3,4,5,6,8,7,9])) #True

def check_all_horizontals(list_of_lists):
    for e in list_of_lists:
        if check_list(e) == True:
            result = True
        else:
            result = False
            break
    return result     

#print(check_all_horizontals([[1,2,3], [1,2,3], [3,2,1]])) #True
#print(check_all_horizontals([[1,2,3], [2,2,3], [3,2,1]])) #False
                        
#check all verticals

def check_all_verticals(list_of_lists):
    shortlist = []
    v = 0
    grid_height = len(list_of_lists)
    result = True
    while v < grid_height:
        for a in list_of_lists:
            shortlist.append(a[v])
        if check_list(shortlist) == True:
            shortlist = []
            v = v + 1
            result = True
        else:
            result = False
            break
    return result

#print(check_all_verticals([[1,2,3], [2,3,1], [3,1,2]])) #True
#print(check_all_verticals([[1,2,3], [2,3,1], [2,3,1]])) #False
#print(check_all_verticals([[1,2,3,4], [2,3,4,1], [3,4,1,2], [4,1,2,3]])) #True
#print(check_all_verticals([[1,2,3,4], [2,3,4,1], [3,4,1,2], [4,1,3,2]])) #False

def check_sudoku(grid):
    if check_all_horizontals(grid) == True and check_all_verticals(grid) == True:
        return True
    else:
        return False

#print(check_sudoku([[1,2,3,4], [2,3,4,1], [3,4,1,2], [4,1,2,3]])) #True
#print(check_sudoku([[1,2,3,4], [2,3,4,1], [3,4,1,2], [4,1,3,2]])) #False

##############
##############

#print (check_sudoku(incorrect))
#>>> False

#print (check_sudoku(correct))
#>>> True

#print (check_sudoku(incorrect2))
#>>> False

#print (check_sudoku(incorrect3))
#>>> False

#print (check_sudoku(incorrect4))
#>>> False

#print (check_sudoku(incorrect5))
#>>> False
